var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EquivariantModels","category":"page"},{"location":"#EquivariantModels","page":"Home","title":"EquivariantModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EquivariantModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EquivariantModels]","category":"page"},{"location":"#EquivariantModels.CategoricalBasis","page":"Home","title":"EquivariantModels.CategoricalBasis","text":"CategoricalBasis : defines the discrete 1p basis \n\n   phi_q(u) = deltau U_q\n\nwhere U_q q = 1 dots Q are finitely many possible values that the  variable u may take. Suppose, e.g., we allow the values [:a, :b, :c],  then \n\nP = CategoricalBasis([:a, :b, :c]; varsym = :u, idxsym = :q)\nevaluate(P, State(u = :a))     # Bool[1, 0, 0]\nevaluate(P, State(u = :b))     # Bool[0, 1, 0]\nevaluate(P, State(u = :c))     # Bool[0, 0, 1]\n\nIf we evaluate it with an unknown state we get an error: \n\nevaluate(P, State(u = :x))   \n# Error : val = x not found in this list\n\nWarning : the list of categories is internally stored as an SVector  which means that lookup scales linearly with the number of categories\n\n\n\n\n\n","category":"type"},{"location":"#EquivariantModels.LinearSearch-Tuple{Any, Any}","page":"Home","title":"EquivariantModels.LinearSearch","text":"LinearSearch(arr, t) Return the index of t in arr, note that we use sort(t) == sort(x) instead of t == x\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels._invmap-Tuple{AbstractVector}","page":"Home","title":"EquivariantModels._invmap","text":"_invmap(a::AbstractVector) Return a dictionary that maps the elements of a to their indices\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels._nlms2b-Tuple{Any, Any, Any}","page":"Home","title":"EquivariantModels._nlms2b","text":"_nlms2b(nn, ll, mm) Return a list of NamedTuples of (n, l, m) from nn, ll, mm\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.closure-Tuple{Any, Any}","page":"Home","title":"EquivariantModels.closure","text":"closure(specnlm,filter) Make a specnlm to be a \"complete\" set to be symmetrised w.r.t to the filter\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.degord2spec-Tuple{EquivariantModels.Radial_basis}","page":"Home","title":"EquivariantModels.degord2spec","text":"degord2spec(;totaldegree, order, Lmax, radialbasis = legendrebasis, wL = 1, islong = true) Return a list of AA specifications and A specifications\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.dropnames-Tuple{NamedTuple, Tuple{Vararg{Symbol}}}","page":"Home","title":"EquivariantModels.dropnames","text":"dropnames(namedtuple::NamedTuple, names::Tuple{Vararg{Symbol}}) Return a new NamedTuple with tuples elements in \"names\" dropped\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.get_natural_spec-Tuple{Any, Any}","page":"Home","title":"EquivariantModels.get_natural_spec","text":"getnaturalspec(spec, spec1p) Get a readible version of spec\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.getspec1idx-Tuple{Any, Any, Any}","page":"Home","title":"EquivariantModels.getspec1idx","text":"getspec1idx(spec1, spec_Rnl, bYlm) Return a vector of tuples of indices of spec1 w.r.t actual indices (i.e. 1, 2, 3, ...) of bRnl and bYlm\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.getspecnlm-Tuple{Any, Any}","page":"Home","title":"EquivariantModels.getspecnlm","text":"getspecnlm(spec1p, spec) Get a readible version of spec\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.make_nlms_spec-Tuple{EquivariantModels.Radial_basis, Any}","page":"Home","title":"EquivariantModels.make_nlms_spec","text":"makenlmsspec(bRnl, bYlm) Return a vector of tuples of indices of spec1 w.r.t naural indices (i.e. (n = ..., l = ..., m = ...) ) of bRnl and bYlm\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.rpe_basis-Union{Tuple{TN}, Tuple{N}, Tuple{Union{RepLieGroups.O3.Rot3DCoeffs, RepLieGroups.O3.Rot3DCoeffs_long, RepLieGroups.O3.Rot3DCoeffs_real}, StaticArraysCore.SVector{N, TN}, StaticArraysCore.SVector{N, Int64}}} where {N, TN}","page":"Home","title":"EquivariantModels.rpe_basis","text":"rpiA2Bmatrix(cgen::Union{Rot3DCoeffs{L,T},Rot3DCoeffsreal{L,T},Rot3DCoeffs_long{L,T}},                 spec::Vector{Vector{NamedTuple}}) Return a sparse matrix for symmetrisation of AA basis of spec with equivariance specified by cgen\n\n\n\n\n\n","category":"method"},{"location":"#EquivariantModels.specnlm2spec1p-Tuple{Any}","page":"Home","title":"EquivariantModels.specnlm2spec1p","text":"specnlm2spec1p(spec_nlm) From a list of AA specifications to all A specifications needed\n\n\n\n\n\n","category":"method"}]
}
