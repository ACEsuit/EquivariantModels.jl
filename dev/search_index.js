var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EquivariantModels","category":"page"},{"location":"#EquivariantModels","page":"Home","title":"EquivariantModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EquivariantModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EquivariantModels]","category":"page"},{"location":"#EquivariantModels.CategoricalBasis","page":"Home","title":"EquivariantModels.CategoricalBasis","text":"CategoricalBasis : defines the discrete 1p basis \n\n   phi_q(u) = deltau U_q\n\nwhere U_q q = 1 dots Q are finitely many possible values that the  variable u may take. Suppose, e.g., we allow the values [:a, :b, :c],  then \n\nP = CategoricalBasis([:a, :b, :c]; varsym = :u, idxsym = :q)\nevaluate(P, State(u = :a))     # Bool[1, 0, 0]\nevaluate(P, State(u = :b))     # Bool[0, 1, 0]\nevaluate(P, State(u = :c))     # Bool[0, 0, 1]\n\nIf we evaluate it with an unknown state we get an error: \n\nevaluate(P, State(u = :x))   \n# Error : val = x not found in this list\n\nWarning : the list of categories is internally stored as an SVector  which means that lookup scales linearly with the number of categories\n\n\n\n\n\n","category":"type"}]
}
